API Overview

--Account's & Login--
## User Registration ##
*Terminology change
*signup - claim a first email address to register with
*claim - get a token via email and add it to an account
*register - the process of actually making an account and final step of claiming first email
*affiliation - school/work of a user 


- signup( email ) returns ClaimToken 
	- Sends "New User" message to email with ClaimToken
- register( ClaimToken, Name, Password, PasswordVerify )
	- Creates a new account with Name if Password==PasswordVerify
	- TODO: Some kind of min password length
- recoverPassword( email ) returns RecoverToken
	- Sends a new RecoverToken to <email> if email is registered
	- Similar to register without the "name" form fields, could just re-use
- login( email, password ) returns Session
	- Must be valid combo
	- Session can expire 
- logout( Session )
	- Expires session immediately 
	
- addEmail( email) 
	- Adds email to account
	- Merges authority
	
-removeEmail(email)
	- Removes email from the Account's list of emails
	
- addAffiliation(affiliation)
	- Adds the affiliation to the account

- removeAffiliation(affiliation)
	- Removes the affiliation from the account

- addCitation(citation)
	- Adds the citation to the Account's list of work
	
-removeCitation(citation)
	- Removes the citation from the Account's list of work
	


--Authority Network--

- trust( Session, email, subject, reasons[] ) returns TrustEdge
	- Requires a valid session
	- Creates a <TrustEdge> from Session.User to <email>
	- Satisfies: I trust <email> about <subject> for these <reasons[]>
	  statement
	- TODO: If <email> is not registered, prompt for invitation into network
- untrust( Session, TrustEdge )
	- Requires a valid Session
	- Requires a <TrustEdge> be present
- viewSubjectiveNetwork( Session, threshold, subject) returns SubjectivePeers[]
	- Requires a valid Session
	- Returns subjective scores for all trusted peers
- viewPublicNetwork(email) returns Peers[]
	- Returns all trusted edges for that user if exists
